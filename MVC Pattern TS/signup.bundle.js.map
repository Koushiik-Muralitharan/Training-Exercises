{"version":3,"file":"signup.bundle.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA,sBAAsB;;;;;;;UC3CtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,mBAAO,CAAC,2DAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./services/UserServices.ts","webpack:///webpack/bootstrap","webpack:///./signup.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRepository = void 0;\nclass UserRepository {\n    constructor() {\n        this.localstorageuserKey = \"UserArray\";\n        this.users = [];\n        this.users = this.UsersLocalStorage();\n    }\n    UsersLocalStorage() {\n        const storedUser = localStorage.getItem(this.localstorageuserKey);\n        return storedUser ? JSON.parse(storedUser) : [];\n    }\n    saveUsersToLocalStorage() {\n        localStorage.setItem(this.localstorageuserKey, JSON.stringify(this.users));\n    }\n    checkIfUserExists(useremail) {\n        return this.users.some((user) => user.email === useremail);\n    }\n    addUser(user) {\n        let result = this.checkIfUserExists(user.email);\n        if (result) {\n            const confirmPasswordError = document.getElementById(\"confirm-password-error\");\n            confirmPasswordError.innerText = \"User with this email already exists.\";\n            return;\n        }\n        this.users.push(user);\n        this.saveUsersToLocalStorage();\n        //this.renderUsers();\n        window.location.href = \"index.html\";\n        console.log(\"User Added:\", user);\n    }\n    getLoggedUser(userArray) {\n        let userAccounts = userArray.filter((user) => user.loggedStatus.trim().toLowerCase() === \"in\");\n        if (userAccounts.length === 0) {\n            console.log(\"No users found with loggedStatus 'in'\");\n            return null;\n        }\n        let userAccount = userAccounts[0];\n        console.log(`The logged user: ${userAccount}`);\n        return userAccount;\n    }\n}\nexports.UserRepository = UserRepository;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst UserServices_1 = require(\"./services/UserServices\");\nconst userRepo = new UserServices_1.UserRepository();\n// Parse the UserArray from localStorage\nlet UserArray = userRepo.UsersLocalStorage();\nconsole.log(UserArray);\n// Retrieve elements by ID and type cast them\nconst userName = document.getElementById('name');\nconst userEmail = document.getElementById('email');\nconst userPasscode = document.getElementById('password');\nconst userConfirmPasscode = document.getElementById('confirm-password');\nconst UserSubmitbutton = document.getElementById('submit-button');\nconst confirmPasswordError = document.getElementById('confirm-password-error');\nconst PasswordError = document.getElementById('password-error');\nconst emailError = document.getElementById('email-error');\nconst nameError = document.getElementById('name-error');\nlet isValid = true;\nuserName.onblur = function () {\n    if (userName.value === \"\") {\n        nameError.innerText = 'The name field is empty.*';\n        isValid = false;\n    }\n    else if (!isNaN(Number(userName.value))) {\n        nameError.innerText = 'Please enter a valid name.*';\n        isValid = false;\n    }\n    else {\n        nameError.innerText = '';\n        isValid = true;\n    }\n};\nuserEmail.onblur = function () {\n    if (userEmail.value === \"\") {\n        emailError.innerText = 'The email field is empty.*';\n        isValid = false;\n    }\n    else {\n        emailError.innerText = '';\n        isValid = true;\n    }\n};\nuserPasscode.onblur = function () {\n    if (userPasscode.value === \"\") {\n        PasswordError.innerText = 'The password field is empty.*';\n        isValid = false;\n    }\n    else {\n        PasswordError.innerText = '';\n        isValid = true;\n    }\n};\nuserConfirmPasscode.onblur = function () {\n    if (userConfirmPasscode.value === \"\") {\n        confirmPasswordError.innerText = 'The confirm password field is empty.*';\n        isValid = false;\n    }\n    else {\n        confirmPasswordError.innerText = '';\n        isValid = true;\n    }\n};\nUserSubmitbutton.onclick = function (event) {\n    event.preventDefault();\n    if (isValid) {\n        let usersName = userName.value;\n        let usersEmail = userEmail.value;\n        let usersPasscode = userPasscode.value;\n        let usersConfirmPasscode = userConfirmPasscode.value;\n        const minLength = 6;\n        const hasUpperCase = /[A-Z]/.test(usersPasscode);\n        const hasLowerCase = /[a-z]/.test(usersPasscode);\n        if (usersPasscode.length < minLength) {\n            PasswordError.innerText = `Password must be at least ${minLength} characters long.*`;\n            return;\n        }\n        else if (!hasUpperCase) {\n            PasswordError.innerText = 'Password must contain one uppercase letter.*';\n            return;\n        }\n        else if (!hasLowerCase) {\n            PasswordError.innerText = 'Password must contain one lowercase letter.*';\n            return;\n        }\n        else if (usersPasscode === usersConfirmPasscode) {\n            const newUser = {\n                name: usersName,\n                email: usersEmail,\n                password: usersPasscode,\n                loggedStatus: \"out\",\n            };\n            userRepo.addUser(newUser);\n        }\n        else {\n            confirmPasswordError.innerText = 'The confirm passcode must match the passcode.*';\n            return;\n        }\n    }\n    else {\n        confirmPasswordError.innerText = \"Ensure the fields are valid before submit.*\";\n    }\n};\n"],"names":[],"sourceRoot":""}