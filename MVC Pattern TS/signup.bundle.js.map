{"version":3,"file":"signup.bundle.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./signup.ts"],"sourcesContent":["\"use strict\";\n// Ensure localStorage is initialized with an empty array if not present\nif (!localStorage.getItem(\"UserArray\")) {\n    localStorage.setItem(\"UserArray\", \"[]\");\n}\n// Parse the UserArray from localStorage\nlet UserArray = JSON.parse(localStorage.getItem(\"UserArray\") || \"[]\");\nclass User {\n    // status: string = \"out\";\n    constructor(name, email, password) {\n        this.name = name;\n        this.email = email;\n        this.password = password;\n        this.loggedStatus = \"out\";\n    }\n    checkIfUserExists() {\n        return UserArray.some(user => user.email === this.email);\n    }\n    addUser() {\n        let result = this.checkIfUserExists();\n        if (result) {\n            const confirmPasswordError = document.getElementById('confirm-password-error');\n            confirmPasswordError.innerText = \"User with this email already exists.\";\n            return;\n        }\n        UserArray.push(this);\n        localStorage.setItem(\"UserArray\", JSON.stringify(UserArray));\n        window.location.href = \"SignIn.htm\";\n    }\n}\n// Retrieve elements by ID and type cast them\nconst userName = document.getElementById('name');\nconst userEmail = document.getElementById('email');\nconst userPasscode = document.getElementById('password');\nconst userConfirmPasscode = document.getElementById('confirm-password');\nconst UserSubmitbutton = document.getElementById('submit-button');\nconst confirmPasswordError = document.getElementById('confirm-password-error');\nconst PasswordError = document.getElementById('password-error');\nconst emailError = document.getElementById('email-error');\nconst nameError = document.getElementById('name-error');\nlet isValid = true;\nuserName.onblur = function () {\n    if (userName.value === \"\") {\n        nameError.innerText = 'The name field is empty.*';\n        isValid = false;\n    }\n    else if (!isNaN(Number(userName.value))) {\n        nameError.innerText = 'Please enter a valid name.*';\n        isValid = false;\n    }\n    else {\n        nameError.innerText = '';\n        isValid = true;\n    }\n};\nuserEmail.onblur = function () {\n    if (userEmail.value === \"\") {\n        emailError.innerText = 'The email field is empty.*';\n        isValid = false;\n    }\n    else {\n        emailError.innerText = '';\n        isValid = true;\n    }\n};\nuserPasscode.onblur = function () {\n    if (userPasscode.value === \"\") {\n        PasswordError.innerText = 'The password field is empty.*';\n        isValid = false;\n    }\n    else {\n        PasswordError.innerText = '';\n        isValid = true;\n    }\n};\nuserConfirmPasscode.onblur = function () {\n    if (userConfirmPasscode.value === \"\") {\n        confirmPasswordError.innerText = 'The confirm password field is empty.*';\n        isValid = false;\n    }\n    else {\n        confirmPasswordError.innerText = '';\n        isValid = true;\n    }\n};\nUserSubmitbutton.onclick = function (event) {\n    event.preventDefault();\n    if (isValid) {\n        let usersName = userName.value;\n        let usersEmail = userEmail.value;\n        let usersPasscode = userPasscode.value;\n        let usersConfirmPasscode = userConfirmPasscode.value;\n        const minLength = 6;\n        const hasUpperCase = /[A-Z]/.test(usersPasscode);\n        const hasLowerCase = /[a-z]/.test(usersPasscode);\n        if (usersPasscode.length < minLength) {\n            PasswordError.innerText = `Password must be at least ${minLength} characters long.*`;\n            return;\n        }\n        else if (!hasUpperCase) {\n            PasswordError.innerText = 'Password must contain one uppercase letter.*';\n            return;\n        }\n        else if (!hasLowerCase) {\n            PasswordError.innerText = 'Password must contain one lowercase letter.*';\n            return;\n        }\n        else if (usersPasscode === usersConfirmPasscode) {\n            let newUser = new User(usersName, usersEmail, usersPasscode);\n            newUser.addUser();\n        }\n        else {\n            confirmPasswordError.innerText = 'The confirm passcode must match the passcode.*';\n            return;\n        }\n    }\n    else {\n        confirmPasswordError.innerText = \"Ensure the fields are valid before submit.*\";\n    }\n};\n"],"names":[],"sourceRoot":""}